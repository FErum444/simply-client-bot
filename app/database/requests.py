# requests.py

from app.database.models import async_session
from app.database.models import User, Plan, Bill, Subscription
from sqlalchemy import select, func # exists, update, delete

async def set_user(tg_id, username, first_name, last_name):
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.tg_id == tg_id))

        if not user:
            session.add(User(tg_id=tg_id,
                username=username,
                first_name=first_name,
                last_name=last_name,
                signup_date = func.now()))
            await session.commit()

async def get_plans():
    async with async_session() as session:
        return await session.scalars(select(Plan))
    
async def get_plan(plan_id):
    async with async_session() as session:
        return await session.scalar(select(Plan).where(Plan.id == plan_id))

async def add_bill(tg_id, bill_number, status, plan, price, pay_link):
    async with async_session() as session:
        
        session.add(Bill(tg_id=tg_id, bill_number=bill_number, status=status, plan=plan, price=price, pay_link=pay_link, issue_date=func.now()))
        await session.commit()

async def update_bill_status(bill_number: int, new_status: bool):
    async with async_session() as session:
        bill = await session.scalar(select(Bill).where(Bill.bill_number == bill_number))
        if bill:
            bill.status = new_status
            bill.paid_date = func.now()
            await session.commit()

async def set_subscription(tg_id, bill_number, plan, duration, payment_info):
    async with async_session() as session:
        session.add(Subscription(tg_id=tg_id, status=True, bill_number=bill_number, plan=plan, duration=duration, payment_info=payment_info, issue_date = func.now()))
        await session.commit()

async def get_active_subscriptions(tg_id):
    async with async_session() as session:
        result = await session.scalars(select(Subscription).where(Subscription.tg_id == tg_id, Subscription.status == True))
        if result:
            return result.all()
        else:
            return []

async def check_free_bill_exists(tg_id: int):
    async with async_session() as session:
        query = select(Bill).where(Bill.tg_id == tg_id, Bill.price == 0, Bill.status == True)
        result = await session.execute(query)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ False
        return result.scalar() is not None





description_0 = (
    "1 –º–µ—Å—è—Ü ‚Äî –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å üß≠\n\n"
    "–ü—Ä–æ–±—É–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü –±–µ—Å–ø–ª–∞—Ç–Ω–æ! ¬´–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å¬ª ‚Äî —ç—Ç–æ –≤–∞—à –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤ –º–∏—Ä, –≥–¥–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å—á–µ–∑–∞—é—Ç, –∫–∞–∫ –¥—ã–º. –°–∫–∞—á–∞–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –Ω–∞—Å—Ç—Ä–æ–π –∑–∞ –º–∏–Ω—É—Ç—É –∏ —É–±–µ–¥–∏—Å—å, —á—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ. –ù–∞—á–Ω–∏ —Å–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —Å–µ–≥–æ–¥–Ω—è!")
description_1 = (
    "1 –º–µ—Å—è—Ü ‚Äî –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç üöÄ\n\n"
    "–ü–æ–≥—Ä—É–∑–∏—Å—å –≤ –º–∏—Ä —Å–≤–æ–±–æ–¥—ã –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞! ¬´–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç¬ª ‚Äî –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—Å—ë –∏ —Å—Ä–∞–∑—É. –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞, –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∏ –ø–æ–ª–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. –í—Å—ë —ç—Ç–æ ‚Äî –∑–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å. –ù–∞—á–Ω–∏ —Å–≤–æ—ë –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!")
description_2 = (
    "3 –º–µ—Å—è—Ü–∞ ‚Äî –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –¢—Ä–æ–∏—Ü–∞ üîê\n\n"
    "–¢—Ä–∏ –º–µ—Å—è—Ü–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è. ¬´–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –¢—Ä–æ–∏—Ü–∞¬ª –∑–∞—â–∏—Ç–∏—Ç —Ç–µ–±—è –∏ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –æ—Å—Ç–∞–≤–ª—è—è –∑–ª—ã—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∫–æ–ª–¥—É–Ω–æ–≤ –≤ —Å—Ç–æ—Ä–æ–Ω–µ. –ù–∏–∑–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å, –º–∞–∫—Å–∏–º—É–º —É–¥–æ–±—Å—Ç–≤–∞ –∏ –ø–æ–ª–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ ‚Äî –≤—Å—ë —ç—Ç–æ –≤ –æ–¥–Ω–æ–º –ø–∞–∫–µ—Ç–µ.")
description_3 = (
    "6 –º–µ—Å—è—Ü–µ–≤ ‚Äî –ú–∞—Å—Ç–µ—Ä –û–±—Ñ—É—Å–∫–∞—Ü–∏–∏ üåÄ\n\n"
    "–ü–æ–ª–≥–æ–¥–∞ –Ω–µ–ø—Ä–µ–≤–∑–æ–π–¥–µ–Ω–Ω–æ–π –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏. ¬´–ú–∞—Å—Ç–µ—Ä –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏¬ª –≤–∏—Ä—Ç—É–æ–∑–Ω–æ –º–∞—Å–∫–∏—Ä—É–µ—Ç —Ç–≤–æ–π —Ç—Ä–∞—Ñ–∏–∫, –ø—Ä–µ–≤—Ä–∞—â–∞—è –µ–≥–æ –≤ –∑–∞–≥–∞–¥–∫—É –¥–∞–∂–µ –¥–ª—è —Å–∞–º—ã—Ö –Ω–∞—Å—Ç–æ–π—á–∏–≤—ã—Ö. –õ–µ–≥–∫–æ, –¥–æ—Å—Ç—É–ø–Ω–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ ‚Äî –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ü–µ–Ω–∏—Ç —Å–≤–æ–±–æ–¥—É!")
description_4 = (
    "12 –º–µ—Å—è—Ü–µ–≤ ‚Äî –≠–ª–∏—Ç–Ω—ã–π —Å—Ç—Ä–∞–∂ üõ°\n\n"
    "–¶–µ–ª—ã–π –≥–æ–¥ –∑–∞—â–∏—Ç—ã –∏ —Å–≤–æ–±–æ–¥—ã –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. ¬´–≠–ª–∏—Ç–Ω—ã–π —Å—Ç—Ä–∞–∂¬ª —Å—Ç–æ–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–∂–µ –≤–∞—à–µ–π –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –≤—ã—Å—à–∏–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ó–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å—é ‚Äî –≤—Å—ë —ç—Ç–æ –∑–∞ –ª—É—á—à—É—é —Ü–µ–Ω—É.")

async def default_plans():
    async with async_session() as session:
        session.add(Plan(name="–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å (–ë–µ—Å–ø–ª–∞—Ç–Ω–æ)", duration = 1, price=0, description=description_0))
        session.add(Plan(name="1 –ú–µ—Å—è—Ü", duration = 1, price=1.56, description=description_1))
        session.add(Plan(name="3 –ú–µ—Å—è—Ü–∞", duration = 3, price=3.276, description=description_2))
        session.add(Plan(name="6 –ú–µ—Å—è—Ü–µ–≤", duration = 6, price=4.68, description=description_3))
        session.add(Plan(name="12 –ú–µ—Å—è—Ü–µ–≤", duration = 12, price=7.489, description=description_4))
        
        await session.commit()

