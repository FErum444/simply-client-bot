#handlers.py

# from aiogram.fsm.state import StatesGroup, State
# from aiogram.fsm.context import FSMContext
from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
import app.keyboards as kb
from config import ADMIN_ID
from app.utils import bill_url, qr_generator, generate_bill_id, payment_validation, calculate_end_date
import app.database.requests as rq

router = Router()

description_menu = (
    "üéâ <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è, –≥–µ—Ä–æ–π —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!</b>\n"
    "–¢—ã –æ–∫–∞–∑–∞–ª—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?\n\n"
    "1Ô∏è‚É£ <b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã</b> ‚Äî –≤—ã–±–∏—Ä–∞–π —Å–≤–æ–π —Å—É–ø–µ—Ä–ø–∞–∫–µ—Ç –∏ —Å—Ç–∞–Ω–æ–≤–∏—Å—å –º–∞—Å—Ç–µ—Ä–æ–º –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∂–¥—ë—Ç! üï∂Ô∏è\n"
    "2Ô∏è‚É£ <b>–ò–Ω—Ñ–æ</b> ‚Äî –∑–∞–≥–ª—è–Ω–∏ —Å—é–¥–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –¥–æ–ª–≥–æ —Ç–≤–æ–π —â–∏—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–∂–µ. üõ°\n\n"
    "üì¢ <b>–ö—Å—Ç–∞—Ç–∏!</b>\n"
    "–£ –Ω–∞—Å –µ—Å—Ç—å <a href=\"#\">—Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª</a> —Å –∫—Ä—É—Ç—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ <a href=\"#\">—á–∞—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏</a>, –≥–¥–µ —Ç–µ–±—è –ø–æ–π–º—É—Ç, –≤—ã—Å–ª—É—à–∞—é—Ç –∏ –ø–æ–º–æ–≥—É—Ç. –ó–∞—Ö–æ—á–µ—à—å ‚Äî –∑–∞–≥–ª—è–¥—ã–≤–∞–π!"
)

# –û—Ç—Ç–≤–µ–Ω –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(CommandStart() or F.data == ('main'))
async def cmd_start(message: Message):
    await rq.set_user(message.from_user.id, message.from_user.username, message.from_user.first_name, message.from_user.last_name)
    await message.reply(description_menu, reply_markup=kb.main, parse_mode="HTML")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == ('main'))
async def cmd_main(callback: CallbackQuery):
    await callback.answer('')
    
    await callback.message.answer(description_menu, reply_markup=kb.main, parse_mode="HTML")

# –ò–Ω—Ñ–æ
@router.callback_query(F.data == ('info'))
async def cmd_info(callback: CallbackQuery):

    user_id = callback.from_user.id
    active_subscriptions = await rq.get_active_subscriptions(user_id)
    
    if active_subscriptions:
        
        table_rows = ""
        for subscription in active_subscriptions:
            table_rows += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {subscription.plan}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {subscription.duration} –ú–µ—Å.\n–î–∞—Ç–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è: {subscription.issue_date}\n\n"

        final_end_date = await calculate_end_date(active_subscriptions)
        
        subscription_message = f"–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n{table_rows}–°—Ä–æ–∫ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {final_end_date}"

    else:
        subscription_message = "–£ –≤–∞—Å –Ω–µ—Ç –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫. –°–∞–º–æ–µ –≤—Ä–µ–º—è –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω–æ –∏–∑ –Ω–∞—à–∏—Ö –∫–ª–∞—Å—Å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π!"

    
    await callback.answer('')
    await callback.message.answer(subscription_message, reply_markup=kb.main, parse_mode="Markdown")


# /default
@router.message(Command('default'))
async def cmd_default(message: Message):
    if message.from_user.id == ADMIN_ID:
        await rq.default_plans()
        await message.reply('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–∞')

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(F.data == 'catalog')
async def catalog(callback: CallbackQuery):
    await callback.answer('')
    tariff_description = (
        "üåç <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!</b> –ú—ã –∑–∞–±–æ—Ç–∏–º—Å—è –æ –≤–∞—à–µ–π –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏, –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. "
        "–í—ã–±–∏—Ä–∞–π—Ç–µ —Ç–∞—Ä–∏—Ñ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ –≤–∞–º, –∏ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, DPI –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–µ–≥—Ä–∞–¥—ã. –í—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Å–≤–æ–±–æ–¥—ã, ‚Äî —É–∂–µ –∑–¥–µ—Å—å!\n\n"
        
        "<b>1. 1 –º–µ—Å—è—Ü ‚Äî –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å üß≠</b>\n"
        "–ü—Ä–æ–±—É–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü –±–µ—Å–ø–ª–∞—Ç–Ω–æ! \"–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å\" ‚Äî —ç—Ç–æ –≤–∞—à –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤ –º–∏—Ä, –≥–¥–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å—á–µ–∑–∞—é—Ç, –∫–∞–∫ –¥—ã–º. "
        "–°–∫–∞—á–∞–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –Ω–∞—Å—Ç—Ä–æ–π –∑–∞ –º–∏–Ω—É—Ç—É –∏ —É–±–µ–¥–∏—Å—å, —á—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ. –ù–∞—á–Ω–∏ —Å–≤–æ—ë –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —Å–µ–≥–æ–¥–Ω—è!\n"
        "<b>–¶–µ–Ω–∞:</b> –ë–µ—Å–ø–ª–∞—Ç–Ω–æ\n\n"
        
        "<b>2. 3 –º–µ—Å—è—Ü–∞ ‚Äî –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –¢—Ä–æ–∏—Ü–∞ üîê</b>\n"
        "–¢—Ä–∏ –º–µ—Å—è—Ü–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è. \"–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –¢—Ä–æ–∏—Ü–∞\" –∑–∞—â–∏—Ç–∏—Ç —Ç–µ–±—è –∏ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –æ—Å—Ç–∞–≤–ª—è—è –∑–ª—ã—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∫–æ–ª–¥—É–Ω–æ–≤ –≤ —Å—Ç–æ—Ä–æ–Ω–µ. "
        "–ù–∏–∑–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å, –º–∞–∫—Å–∏–º—É–º —É–¥–æ–±—Å—Ç–≤–∞ –∏ –ø–æ–ª–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ ‚Äî –≤—Å—ë —ç—Ç–æ –≤ –æ–¥–Ω–æ–º –ø–∞–∫–µ—Ç–µ.\n"
        "<b>–¶–µ–Ω–∞:</b> 2 Ton\n\n"
        
        "<b>3. 6 –º–µ—Å—è—Ü–µ–≤ ‚Äî –ú–∞—Å—Ç–µ—Ä –û–±—Ñ—É—Å–∫–∞—Ü–∏–∏ üåÄ</b>\n"
        "–ü–æ–ª–≥–æ–¥–∞ –Ω–µ–ø—Ä–µ–≤–∑–æ–π–¥–µ–Ω–Ω–æ–π –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏. \"–ú–∞—Å—Ç–µ—Ä –æ–±—Ñ—É—Å–∫–∞—Ü–∏–∏\" –≤–∏—Ä—Ç—É–æ–∑–Ω–æ –º–∞—Å–∫–∏—Ä—É–µ—Ç —Ç–≤–æ–π —Ç—Ä–∞—Ñ–∏–∫, –ø—Ä–µ–≤—Ä–∞—â–∞—è –µ–≥–æ –≤ –∑–∞–≥–∞–¥–∫—É –¥–∞–∂–µ –¥–ª—è —Å–∞–º—ã—Ö –Ω–∞—Å—Ç–æ–π—á–∏–≤—ã—Ö. "
        "–õ–µ–≥–∫–æ, –¥–æ—Å—Ç—É–ø–Ω–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ ‚Äî –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ü–µ–Ω–∏—Ç —Å–≤–æ–±–æ–¥—É!\n"
        "<b>–¶–µ–Ω–∞:</b> 4 Ton\n\n"
        
        "<b>4. 12 –º–µ—Å—è—Ü–µ–≤ ‚Äî –≠–ª–∏—Ç–Ω—ã–π –°—Ç—Ä–∞–∂ üõ°</b>\n"
        "–¶–µ–ª—ã–π –≥–æ–¥ –∑–∞—â–∏—Ç—ã –∏ —Å–≤–æ–±–æ–¥—ã –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. \"–≠–ª–∏—Ç–Ω—ã–π –°—Ç—Ä–∞–∂\" —Å—Ç–æ–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–∂–µ –≤–∞—à–µ–π –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –≤—ã—Å—à–∏–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. "
        "–ó–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å—é ‚Äî –≤—Å—ë —ç—Ç–æ –∑–∞ –ª—É—á—à—É—é —Ü–µ–Ω—É.\n"
        "<b>–¶–µ–Ω–∞:</b> 7 Ton"
    )

    await callback.message.answer(tariff_description, reply_markup=await kb.inline_buttons(), parse_mode="HTML")

# –ü–æ–ª–Ω–æ–µ –û–ø–∏—Å–∞–Ω–∏–µ –ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(F.data.startswith('plan_'))
async def category(callback: CallbackQuery):
    plan_data =  await rq.get_plan(callback.data.split('_')[1])

    if plan_data.price > 0:
        await callback.answer('')
        await callback.message.answer(plan_data.description, reply_markup=await kb.description_plans(callback.data.split('_')[1]))
    else:
        await callback.answer('')
        await callback.message.answer(plan_data.description, reply_markup=await kb.free_activate(callback.data.split('_')[1]))

# –í—ã—Å–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É
@router.callback_query(F.data.startswith('pay_'))
async def pay_plan_one(callback: CallbackQuery):
    plan_data =  await rq.get_plan(callback.data.split('_')[1])
    user_id = callback.from_user.id
    bill_number = generate_bill_id()
    status = False
    plan = plan_data.name
    price = int(plan_data.price)
    duration = plan_data.duration

    if price >= 1:
        link = bill_url(price, bill_number)
        await rq.add_bill(user_id, bill_number, status, plan, price, link)
        input_file = qr_generator(link)
        
        invoice = (
            "‚è≥ <b>–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É!</b>\n\n"
            f"–ù–æ–º–µ—Ä —Å—á—ë—Ç–∞: <b>{bill_number}</b>\n"
            f"–¢–∞—Ä–∏—Ñ: <b>{plan}</b>\n"
            f"–¶–µ–Ω–∞: <b>{price} Ton</b>\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: <b>{duration} –º–µ—Å—è—Ü–∞(–µ–≤)</b>\n\n"
            "–ü–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É –º–∏–Ω—É—Ç, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª. üïí\n\n"
            "–û–ø–ª–∞—Ç–∏—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∫–æ—à–µ–ª—ë–∫ <b>Wallet</b> –≤ –¢–µ–ª–µ–≥—Ä–∞–º –∏–ª–∏ <b>Tonkeeper</b>. –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–±:\n\n"
            "üëâ <a href='https://t.me/wallet'>Wallet –≤ –¢–µ–ª–µ–≥—Ä–∞–º</a>\n"
            "üëâ <a href='https://tonkeeper.com'>Tonkeeper</a>\n\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π ‚Äî –º—ã –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º! –û–±—Ä–∞—â–∞–π—Å—è –≤ –Ω–∞—à —á–∞—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ <a href='https://t.me/simply_network_support'>—Ç—É—Ç</a> üîßüí¨"
        )

        await callback.answer('')
        await callback.message.answer_photo(caption=invoice, photo=input_file, reply_markup=await kb.check_pay(callback.data.split('_')[1], bill_number), parse_mode="HTML")
    
    if price == 0:
        if await rq.check_free_bill_exists(user_id) == False:
            await rq.add_bill(user_id, bill_number, status, plan, price, None)
            
            success_message = (
                "‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –¢—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π!</b>\n"
                "‚ú® <b>–£—Ä–∞! –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b> –ò—Å–ø—ã—Ç–∞–π, –∫–∞–∫–æ–≤–æ —ç—Ç–æ –±—ã—Ç—å –Ω–µ–≤–∏–¥–∏–º—ã–º –∏ —Å–≤–æ–±–æ–¥–Ω—ã–º –≤ —Å–µ—Ç–∏. –ü—É—Å—Ç—å –∑–ª—ã–µ –∫–æ–ª–¥—É–Ω—ã –æ—Ç–¥—ã—Ö–∞—é—Ç! üï∂Ô∏è\n\n"
                "üßæ <b>–î–µ—Ç–∞–ª–∏ –æ–ø–ª–∞—Ç—ã:</b>\n"
                f"- –ß–µ–∫: <code>{bill_number}</code>\n"
                f"- –¢–∞—Ä–∏—Ñ: <b>{plan}</b>\n"
                f"- –¶–µ–Ω–∞: <b>{price} TON</b>\n"
                f"- –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: <b>{duration} –º–µ—Å.</b>\n\n"
                "üìå <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>\n"
                "–°–º–µ–ª–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Å—è –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è, –Ω–æ –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Ç—ë–º–Ω—ã–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∫–æ–ª–¥—É–Ω—ã –ø–æ–ø—Ä–æ–±—É—é—Ç –Ω–∞–≤—Ä–µ–¥–∏—Ç—å, –º—ã –Ω–∞ —Å—Ç—Ä–∞–∂–µ! "
                "–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–ª—É—á–∏ –ø–æ–º–æ—â—å –≤ –Ω–∞—à–µ–º <a href='https://t.me/simply_network_support'>—á–∞—Ç–µ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏</a>.\n\n"
                "üí™ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª –Ω–∞—Å!"
            )

            await rq.update_bill_status(bill_number, True)
            await rq.set_subscription(user_id, bill_number, plan, duration, "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ")
            await callback.answer('–£—Å–ø–µ—à–Ω–æ')
            await callback.message.answer(success_message, parse_mode="HTML", reply_markup=kb.main)
        else:

            check = (
                "‚ö†Ô∏è <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n"
                "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —Ç—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª –º–æ–º–µ–Ω—Ç. ü§î –¢–µ–ø–µ—Ä—å –≤—Ä–µ–º—è –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö –∫—Ä—É—Ç—ã—Ö —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–≤–æ—ë –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏! üöÄüîí"
            )

            await callback.answer('')
            await callback.message.answer(check, reply_markup=await kb.inline_buttons(), parse_mode="HTML")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
@router.callback_query(F.data.startswith('check_pay_'))
async def check_pay(callback: CallbackQuery):
    plan_data =  await rq.get_plan(callback.data.split('_')[2])
    
    bill_number = callback.data.split('_')[3]
    price = int(plan_data.price)
    
    validation = payment_validation(bill_number, price)

    if validation is not False:
        await rq.update_bill_status(bill_number, True)
        bot = callback.message.bot

        user_id = callback.from_user.id
        plan = plan_data.name
        duration = plan_data.duration

        username = callback.from_user.username
        first_name = callback.from_user.first_name
        last_name = callback.from_user.last_name

        admin_message = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>@{username}</b>\n"
            f"UserID: <code>{user_id}</code>\n"
            f"–ò–º—è: {first_name}\n"
            f"–§–∞–º–∏–ª–∏—è: {last_name}\n\n"
            f"<b>–°–æ–≤–µ—Ä—à–∏–ª –ø–ª–∞—Ç—ë–∂.</b>\n"
            f"–ù–æ–º–µ—Ä —Å—á—ë—Ç–∞: <code>{bill_number}</code>\n"
            f"–ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏: <b>{plan}</b>\n"
            f"–¶–µ–Ω–∞: <b>{price} Ton</b>\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: <b>{duration} –º–µ—Å.</b>\n\n"
            "<b>–¢—Ä–µ–±—É–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ü–∏—è.</b>"
        )

        success_message = (
            "‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –¢—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π!</b>\n\n"
            "‚ú® <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.</b> –¢–µ–ø–µ—Ä—å —Ç—ã —á–ª–µ–Ω —ç–ª–∏—Ç–Ω–æ–≥–æ –∫–ª—É–±–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–≥–µ—Ä–æ–µ–≤! üéâ\n\n"
            "üßæ <b>–î–µ—Ç–∞–ª–∏ –æ–ø–ª–∞—Ç—ã:</b>\n"
            f"- –ß–µ–∫: <code>{bill_number}</code>\n"
            f"- –¢–∞—Ä–∏—Ñ: <b>{plan}</b>\n"
            f"- –¶–µ–Ω–∞: <b>{price} TON</b>\n"
            f"- –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: <b>{duration} –º–µ—Å.</b>\n\n"
            "üìå <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>\n"
            "–°–º–µ–ª–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Å—è –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è, –Ω–æ –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Ç—ë–º–Ω—ã–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∫–æ–ª–¥—É–Ω—ã –ø–æ–ø—Ä–æ–±—É—é—Ç –Ω–∞–≤—Ä–µ–¥–∏—Ç—å, –º—ã –Ω–∞ —Å—Ç—Ä–∞–∂–µ! "
            "–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–ª—É—á–∏ –ø–æ–º–æ—â—å –≤ –Ω–∞—à–µ–º <a href='https://t.me/simply_network_support'>—á–∞—Ç–µ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏</a>.\n\n"
            "üí™ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª –Ω–∞—Å!"
        )

        await rq.set_subscription(user_id, bill_number, plan, duration, str(validation))
        await callback.answer('–£—Å–ø–µ—à–Ω–æ')
        await callback.message.edit_caption(caption=success_message, parse_mode="HTML")
        await bot.send_message(chat_id=ADMIN_ID, text=admin_message, reply_markup=kb.admin_check_point, parse_mode="HTML")
        
    else: 
        await callback.answer(f'–ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª! –í–æ–∑–º–æ–∂–Ω–æ –±–ª–æ–∫—á–µ–π–Ω –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –¢–∞–∫–æ–µ –∏–Ω–æ–≥–¥–∞ –±—ã–≤–∞–µ—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É –º–∏–Ω—É—Ç –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', show_alert=True)
